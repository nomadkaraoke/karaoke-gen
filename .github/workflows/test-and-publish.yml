name: Test and Publish

on: [push, pull_request, workflow_dispatch]

# Add permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: |
          poetry install --with dev
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Install spaCy language models
        run: |
          poetry run python -m spacy download en_core_web_sm
      
      - name: Run unit tests
        run: |
          poetry run pytest tests/unit/ -v --cov=karaoke_gen --cov-report=xml --cov-report=term-missing --cov-fail-under=70
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
  
      - name: Run integration tests  
        run: |
          poetry run pytest tests/integration/ -v
      
      - name: Build package
        run: |
          poetry build
      
      - name: Free Disk Space (GHA Ubuntu Runner)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          haskell: true
          dotnet: false
          large-packages: false
          docker-images: false
          swap-storage: false

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -m karaoke_gen.utils.gen_cli --help

      - if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        name: Extract version
        id: extract_version
        run: |
          VERSION=$(poetry version --short)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìã Extracted version: $VERSION"

      - if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "üè∑Ô∏è  Tag v$VERSION already exists, skipping release"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "‚ú® Tag v$VERSION does not exist, proceeding with release"
          fi

      - if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check_tag.outputs.tag_exists == 'false'
        name: Publish to PyPI
        run: |
          echo "üì¶ Publishing the following files to PyPI:"
          ls -la dist/
          echo "üöÄ Publishing to PyPI..."
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish

      - if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check_tag.outputs.tag_exists == 'false'
        name: Create Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${{ steps.extract_version.outputs.version }}" -m "Release v${{ steps.extract_version.outputs.version }}"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} "v${{ steps.extract_version.outputs.version }}"

      - if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check_tag.outputs.tag_exists == 'false'
        name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.extract_version.outputs.version }}"
          name: "v${{ steps.extract_version.outputs.version }}"
          body: |
            ## Changes in v${{ steps.extract_version.outputs.version }}
            
            This release was automatically created from the main branch.
            
            ### Installation
            ```bash
            pip install karaoke-gen==${{ steps.extract_version.outputs.version }}
            ```
            
            ### Assets
            - Python package published to PyPI
            - Frontend deployed to GitHub Pages at gen.nomadkaraoke.com
            
            For detailed changes, see the commit history.
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz

  # Deploy frontend to GitHub Pages
  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Prepare frontend files
        run: |
          echo "üìÅ Preparing frontend files for deployment..."
          mkdir -p _site
          cp -r frontend/* _site/
          echo "‚úÖ Frontend files copied to _site/"
          ls -la _site/
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  